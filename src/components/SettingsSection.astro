---
import Icon from "./Icon.astro";
import InstallInstructions from "./InstallInstructions.astro";

export interface Props {
  heading: string;
}

const { heading } = Astro.props;
---

<section id="livebook-settings" class="bg-gray-100">
  <div
    class="m-auto max-w-7xl px-4 py-12 md:py-20 flex flex-col items-center space-y-16 md:space-y-24"
  >
    <div class="flex flex-col items-center w-full max-w-3xl">
      <h2 class="text-gray-900 font-light text-center text-xl md:text-3xl">
        {heading}
      </h2>
      <span
        class="mt-3 max-w-md md:max-w-xl text-gray-700 font-medium text-center"
      >
        If you already installed Livebook, you can configure the default
        Livebook location where you want to open notebooks.
      </span>
      <div class="mt-8 w-full flex flex-col">
        <input
          data-el-livebook-url-input
          class="input"
          placeholder="Your Livebook URL"
          spellcheck="false"
          autocomplete="off"
        />
        <div data-el-livebook-status class="mt-1">
          <span
            data-show-on-status="up"
            class="flex items-center space-x-1.5 text-sm text-green-500 font-medium"
          >
            <Icon icon="check-line" class="text-base" />
            <span>Livebook up</span>
          </span>
          <span
            data-show-on-status="checking"
            class="flex items-center space-x-1.5 text-sm text-gray-400 font-medium"
          >
            <Icon icon="loader-4-line" class="animate-spin" />
            <span>Checking status</span>
          </span>
          <span
            data-show-on-status="down"
            class="flex items-center space-x-1.5 text-sm text-red-400 font-medium"
          >
            <Icon icon="close-line" />
            <span>
              We can't reach this Livebook (but we saved your preference anyway)
            </span>
          </span>
        </div>
        <label class="text-sm text-gray-700 font-medium mt-1">
          <input
            data-el-livebook-desktop-toggle
            class="checkbox-base bg-white mr-1"
            type="checkbox"
          />
          I use Livebook Desktop for Windows/Mac
        </label>

        <slot />
      </div>
    </div>
  </div>
</section>

<div class="bg-gray-100 px-4 w-full">
  <div class="m-auto w-full max-w-7xl h-[1px] bg-gray-300"></div>
</div>

<section id="install" class="bg-gray-100">
  <div class="m-auto max-w-7xl px-4 pt-10 md:pt-20 flex flex-col items-center">
    <h2 class="text-gray-900 text-2xl md:text-3xl font-semibold text-center">
      Not yet? Install Livebook in just a minute
    </h2>
    <span class="mt-3 md:max-w-lg text-gray-700 font-medium text-center">
      Livebook is open source, free, and ready to run anywhere.
    </span>
  </div>
  <div class="pb-12"><InstallInstructions /></div>
</section>

<style>
  [data-el-livebook-status]:not([data-status="up"]) [data-show-on-status="up"] {
    @apply hidden;
  }

  [data-el-livebook-status]:not([data-status="checking"])
    [data-show-on-status="checking"] {
    @apply hidden;
  }

  [data-el-livebook-status]:not([data-status="down"])
    [data-show-on-status="down"] {
    @apply hidden;
  }

  [data-el-livebook-url-input][disabled] {
    @apply bg-gray-200;
  }
</style>

<script>
  import { ensureHttpScheme } from "../lib/requests";
  import { settingsStore } from "../lib/settings-store";
  import { getLivebookHealthUrls } from "../lib/urls";
  import { debounce, firstSuccess } from "../lib/utils";

  const livebookUrlInputEl = document.querySelector(
    `[data-el-livebook-url-input]`
  );
  const livebookStatusEl = document.querySelector(`[data-el-livebook-status]`);
  const livebookDesktopToggleEl = document.querySelector(
    `[data-el-livebook-desktop-toggle]`
  );

  function setLivebookStatus(status) {
    livebookStatusEl.setAttribute("data-status", status);
  }

  function checkLivebookStatus(livebookUrl) {
    setLivebookStatus("checking");

    firstSuccess(getLivebookHealthUrls(livebookUrl), checkLivebookHealth)
      .then(() => setLivebookStatus("up"))
      .catch(() => setLivebookStatus("down"));
  }

  function checkLivebookHealth(url) {
    return fetch(url)
      .then((response) => response.json())
      .then((json) => {
        if (json.application === null) {
          return Promise.reject(
            new Error("application running, but it's not Livebook")
          );
        }
      });
  }

  const debouncedCheckLivebookStatus = debounce(checkLivebookStatus, 500);

  function toggleLivebookDesktop(enabled) {
    if (enabled) {
      setLivebookStatus("desktop");
      livebookUrlInputEl.disabled = true;
      livebookUrlInputEl.setAttribute("aria-disabled", "true");
      settingsStore.update({ useLivebookDesktop: true });
    } else {
      livebookUrlInputEl.disabled = false;
      livebookUrlInputEl.setAttribute("aria-disabled", "false");
      settingsStore.update({ useLivebookDesktop: false });
      livebookUrlInputEl.dispatchEvent(new Event("input"));
    }
  }

  const { livebookUrl, useLivebookDesktop } = settingsStore.get();
  livebookUrlInputEl.value = livebookUrl;
  livebookDesktopToggleEl.checked = useLivebookDesktop;
  toggleLivebookDesktop(useLivebookDesktop);

  if (livebookUrl && !useLivebookDesktop) {
    checkLivebookStatus(livebookUrl);
  }

  livebookUrlInputEl.addEventListener("input", (event) => {
    const value = event.target.value;
    // Normalize the URL
    const livebookUrl = value && ensureHttpScheme(value);
    settingsStore.update({ livebookUrl });

    if (livebookUrl) {
      setLivebookStatus("checking");
      debouncedCheckLivebookStatus(livebookUrl);
    } else {
      setLivebookStatus(null);
    }
  });

  livebookUrlInputEl.addEventListener("blur", (event) => {
    // Reflect the normalized URL in the input
    event.target.value = settingsStore.get().livebookUrl;
  });

  livebookDesktopToggleEl.addEventListener("change", (event) => {
    toggleLivebookDesktop(event.target.checked);
  });
</script>
